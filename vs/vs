#!/usr/bin/env python

import re
import sys
from interfaces import get_local_validator, get_global_validator, dummy_validator, list_global_validators, list_local_validators
from exceptions import *
from values import save_value, arg_eval, get_value, limits_add_validator

import local_validators
import global_validators

from syntax import Syntax
from stream import Stream

args=sys.argv

def print_help():
	print("Usage: {0} [-h] [-v validator] [-f function] script file".format(args[0].split('/')[-1]))

if len(args)==1:
	print_help()
	sys.exit(0)

if args[1] in ('-v','--validator'):
	if len(args)>2: arg=args[2]
	else: arg=''
	if arg in ('-h','--help'):
		print("Usage: {0} {1} validator\n  where validator is a prefix of the function you are looking for\n  if validator is not specified, all functions will be listed".format(args[0].split('/')[-1],args[1]))
		sys.exit(0)
	list_local_validators(arg)
	sys.exit(0)

elif args[1] in ('-f','--function'):
	if len(args)>2: arg=args[2]
	else: arg=''
	if arg in ('-h','--help'):
		print("Usage: {0} {1} validator\n  where validator is a prefix of the function you are looking for\n  if validator is not specified, all functions will be listed".format(args[0].split('/')[-1],args[1]))
		sys.exit(0)
	list_global_validators(arg)
	sys.exit(0)

elif args[1] in ('-h','--help'):
	print_help()
	sys.exit(0)

elif len(args)<3:
	print("Two positional arguments are required\nexecute {} -h for help".format(args[0].split('/')[-1]))
	sys.exit(1)

else:
	try:
		script_file = open(args[1],'r')
		test_file = open(args[2],'r')
	except FileNotFoundError as e:
		print("Error: {}".format(e))
		sys.exit(1)
	except PermissionError as e:
		print("Error: {}".format(e))
		sys.exit(1)

syntax = ''
limits = ''
script = ''

curr = 0

for l in script_file:
	if l.startswith('#'):
		continue
	elif l == '===\n':
		curr += 1
	else:
		if curr == 0: syntax += l
		if curr == 1: limits += l
		if curr == 2: script += l

def parse_limit_function(cmd):
	"""Parses the limits part - searches for funcions like RANGE(1,20) and returns a local validator"""
	x = re.match(r'([A-Z_]+)(?:[(](.*?)[)])?', cmd)
	if x is None or x.group(1) is None: return lambda x: x
	name = x.group(1)
	if x.group(2) is None:
		args = []
	else:
		args = map(lambda x: x.strip(), x.group(2).split(','))
	
	x=get_local_validator(name)
	if x is None:
		raise UserSyntaxError('unknown function: "{}"'.format(cmd))
	return x(*list(args))

def parse_limits(limits):
	for l in limits.split('\n'):
		if l.startswith('#') or l.isspace() or not l:
			continue 
		var, cmds = l.split(':')
		for cmd in map(str.strip, cmds.strip().split(';')):
			limits_add_validator(var,parse_limit_function(cmd))

def parse_script_function(cmd):
	x = re.match(r'([A-Z_]+)(?:[(](.*?)[)])?', cmd)
	if x is None or x.group(1) is None: return None
	name = x.group(1)
	if x.group(2) is None:
		args = []
	else:
		args = map(lambda x: get_value(x.strip()), x.group(2).split(','))
	
	x=get_global_validator(name)
	if x is None:
		raise UserSyntaxError('unknown function: "{}"'.format(cmd))
	x(*list(args))

def parse_script(script):
	for l in script.split('\n'):
		if l.startswith('#') or l.isspace() or not l:
			continue
		for cmd in map(str.strip, l.strip().split(';')):
			parse_script_function(cmd)

try:
	parse_limits(limits)

	# read the syntax:

	ss = Stream(test_file.read())

	show_position = True

	# read syntax from the test
	syntax_object=Syntax(syntax)
	syntax_object.read(ss)
	ss.read_eof()

	show_position = False

	parse_script(script)

except UserSyntaxError as e:
	print("SYNTAX ERROR: {}".format(e))
	sys.exit(1)
except UserTestError as e:
	if show_position: print("WRONG TEST ({}): {}".format(ss.position(),e))
	else: print("WRONG TEST: {}".format(e))
	sys.exit(1)
except VSError as e:
	print("SYSTEM ERROR: {}".format(e))
	sys.exit(1)

print("OK")

script_file.close()
test_file.close()

#print(VALUES)
#print(VALUES_IDS)
